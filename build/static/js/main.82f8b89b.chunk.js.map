{"version":3,"sources":["globals.js","Components/MergeButton/mergeButton.js","Logic/subtitleMerger.js","Logic/fileReader.js","Components/FileSelector/fileSelector.js","Components/Output/output.js","Components/App.js","serviceWorker.js","index.js"],"names":["Global","MergeButton","react_default","a","createElement","className","onClick","this","props","names","join","React","Component","subtitleMerger","content1","content2","data1","parser","fromSrt","data2","data","data1L","length","data2L","lastID","forgotten","i","j","startTime","endTime","text","subtitle","push","toSrt","fileReader","file1","file2","callback","fileReader1","FileReader","fileReader2","onload","event","target","result","merged","readAsText","FileSelector","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","convertFiles","state","selectorFiles","fileName","console","log","setState","info","onMerge","_this2","title","htmlFor","name","type","id","onChange","e","files","mergeButton","Output","selectText","mergedTextarea","select","ref","defaultValue","content","readOnly","rows","style","width","App","rendered","window","File","FileList","Blob","alert","processMergedSubtitles","document","fileSelector","output","Boolean","location","hostname","match","ReactDOM","render","Components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82f8b89b.chunk.js","sourcesContent":["export const Global = {\n  appName: 'Subtitle Merger',\n  appDesc: 'Mix two subtitles into one',\n  selectFiles: 'Select two files...',\n  cols: 'col-xl-10 offset-1'\n};","import React from 'react';\nimport {Global} from './../../globals';\n\nclass MergeButton extends React.Component {\n  \n  render() {\n    return (\n      <div className={Global.cols}>\n        <button className=\"btn btn-info btn-lg btn-400\"\n                onClick={this.props.onClick}>{this.props.names.join(' + ')} -> Merge</button>\n      </div>\n    )\n  }\n}\n\nexport default MergeButton;","import parser from 'subtitles-parser';\n\nfunction subtitleMerger (content1, content2) {\n  \n  let data1 = parser.fromSrt(content1, true);\n  let data2 = parser.fromSrt(content2, true);\n  let data = data1;\n\n  let data1L = data1.length;\n  let data2L = data2.length;\n\n  // last inserted ID. Used in case we skip subtitles\n  let lastID = 0;\n  let forgotten = [];\n\n  for (let i = 0; i < data1L; ++i) {\n    for (let j = lastID; j < data2L; ++j) {\n      if (lastID >= data2L) break;\n      if (data2[j].startTime > data1[i].startTime + 2000) break;\n\n      if (\n        // starts 200ms on either side and the other one hasn't ended\n        data2[j].startTime >= data1[i].startTime - 200\n        && data2[j].startTime <= data1[i].startTime + 200\n        && data2[j].startTime <  data1[i].endTime\n      )\n      {\n        data[i].text += '<br/><i>' + data2[j].text + '</i>';\n        data[i].subtitle = data2[j];\n        lastID = ++j;\n        // j = data2L;\n        break;\n      } else {\n        forgotten.push(j);\n        lastID = j + 1;\n      }\n    }\n\n    if (forgotten.length) {\n      for (let j = 0; j < forgotten.length; ++j) {\n        // forgotten[j] is the `j` var\n        data[i].text += '<br/><i>' + data2[forgotten[j]].text + '</i>';\n      }\n      forgotten = [];\n    }\n  }\n  \n  let text = parser.toSrt(data);\n\n  return text;\n}\n\nexport default subtitleMerger;","import subtitleMerger from './subtitleMerger';\n\nfunction fileReader (file1, file2, callback) {\n  let fileReader1 = new FileReader();\n  let fileReader2 = new FileReader();\n  let content1, content2;\n\n  fileReader1.onload = function(event) {\n    content1 = event.target.result;\n    if (content1 && content2) {\n      let merged = subtitleMerger(content1, content2);\n      callback(merged);\n    }\n  };\n  fileReader2.onload = function(event) {\n    content2 = event.target.result;\n    if (content1 && content2) {\n      let merged = subtitleMerger(content1, content2);\n      callback(merged);\n    }\n  };\n  \n  fileReader1.readAsText(file1);\n  fileReader2.readAsText(file2);\n}\n\nexport default fileReader;","import React from 'react';\nimport MergeButton from './../MergeButton/mergeButton';\nimport fileReader from './../../Logic/fileReader';\nimport {Global} from './../../globals';\n\nclass FileSelector extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.convertFiles = this.convertFiles.bind(this);\n  \n  \n    this.state = {\n      file1: false,\n      file2: false\n    };\n  }\n  \n  handleChange(selectorFiles, fileName) {\n    console.log(fileName + ' uploaded:', selectorFiles);\n    \n    if (fileName === 'file1') {\n      this.setState({\n        file1: selectorFiles\n      });\n    } else {\n      this.setState({\n        file2: selectorFiles\n      });\n    }\n  }\n  \n  componentDidUpdate() {\n    if (this.state.file1 && this.state.file2) {\n      // both are uploaded\n      // make a preview here...\n      console.info('Both files added');\n    }\n  }\n  \n  convertFiles() {\n    let file1 = this.state.file1[0];\n    let file2 = this.state.file2[0];\n  \n    fileReader(file1, file2, this.props.onMerge);\n  }\n  \n  render() {\n    return (\n      <div className=\"row\">\n        <div className={Global.cols}>\n          <br/>\n          <h6 className=\"text-center\">{this.props.title}</h6>\n        </div>\n        <br/>\n        <div className={Global.cols}>\n          <label htmlFor=\"file1\" className=\"btn btn-outline-success btn-lg btn-400\">\n            main subtitle {this.state.file1 ? this.state.file1[0].name : ''}</label>\n          <br/>\n          <label htmlFor=\"file2\" className=\"btn btn-outline-primary btn-lg btn-400\">\n            translation {this.state.file2 ? this.state.file2[0].name : ''}</label>\n          \n          <input type=\"file\" name=\"file1\" id=\"file1\" className=\"far-away\"\n                 onChange={(e) => this.handleChange(e.target.files, 'file1')}/>\n          <input type=\"file\" name=\"file2\" id=\"file2\" className=\"far-away\"\n                 onChange={(e) => this.handleChange(e.target.files, 'file2')}/>\n        </div>\n        {this.state.file1 && this.state.file2 ?\n          <MergeButton onClick={this.convertFiles} names={[this.state.file1[0].name, this.state.file2[0].name]}/> : null}\n      </div>\n    );\n  }\n}\n\nexport default FileSelector;","import React from 'react';\nimport {Global} from './../../globals';\n\n\nclass Output extends React.Component {\n    constructor() {\n      super();\n      this.selectText = this.selectText.bind(this);\n    }\n  \n    selectText() {\n      this.mergedTextarea.select();\n    }\n  \n    render() {\n      return (\n        <div className=\"row\">\n          <div className={Global.cols}>\n            merged subtitles<br/>\n            <textarea id={'merged_textarea'} className=\"form-control\" onClick={this.selectText}\n                      ref={(mergedTextarea) => this.mergedTextarea = mergedTextarea}\n                      defaultValue={this.props.content} readOnly={true} rows={30} style={{width: '100%'}}/>\n          </div>\n        </div>\n      )\n    }\n}\n\nexport default Output;","import React, {Component} from 'react';\nimport './../Assets/CSS/App.css';\nimport FileSelector from './FileSelector/fileSelector';\nimport Output from './Output/output';\nimport {Global} from './../globals';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      content1: false,\n      content2: false,\n      rendered: false\n    };\n  \n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      // Great success! All the File APIs are supported.\n      console.info(\"FileReader, File List, Blob and File: all supported\");\n    } else {\n      alert('The File APIs are not fully supported in this browser.');\n    }\n    this.processMergedSubtitles = this.processMergedSubtitles.bind(this);\n  }\n  \n  componentDidMount() {\n    document.title = Global.appName;\n  }\n  \n  processMergedSubtitles (merged) {\n    this.setState({merged: merged});\n  }\n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header header\">\n          <h2 className=\"text-center\">{Global.appDesc}</h2>\n        </header>\n        <div className=\"container container-fluid\">\n          <FileSelector title={Global.selectFiles} convertFiles={this.convertFiles} onMerge={this.processMergedSubtitles}/>\n          {this.state.merged ? <Output content={this.state.merged}/> : null }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}